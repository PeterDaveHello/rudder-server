// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/router/batchrouter/asyncdestinationmanager/bing-ads (interfaces: BingAdsUtils)

// Package mock_bulkservice is a generated GoMock package.
package mock_bulkservice

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBingAdsUtils is a mock of BingAdsUtils interface.
type MockBingAdsUtils struct {
	ctrl     *gomock.Controller
	recorder *MockBingAdsUtilsMockRecorder
}

// MockBingAdsUtilsMockRecorder is the mock recorder for MockBingAdsUtils.
type MockBingAdsUtilsMockRecorder struct {
	mock *MockBingAdsUtils
}

// NewMockBingAdsUtils creates a new mock instance.
func NewMockBingAdsUtils(ctrl *gomock.Controller) *MockBingAdsUtils {
	mock := &MockBingAdsUtils{ctrl: ctrl}
	mock.recorder = &MockBingAdsUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBingAdsUtils) EXPECT() *MockBingAdsUtilsMockRecorder {
	return m.recorder
}

// CreateZipFile mocks base method.
func (m *MockBingAdsUtils) CreateZipFile(arg0, arg1 string) (string, []int64, []int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateZipFile", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]int64)
	ret2, _ := ret[2].([]int64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// CreateZipFile indicates an expected call of CreateZipFile.
func (mr *MockBingAdsUtilsMockRecorder) CreateZipFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateZipFile", reflect.TypeOf((*MockBingAdsUtils)(nil).CreateZipFile), arg0, arg1)
}

// ProcessPollStatusData mocks base method.
func (m *MockBingAdsUtils) ProcessPollStatusData(arg0 [][]string) map[string]map[string]struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPollStatusData", arg0)
	ret0, _ := ret[0].(map[string]map[string]struct{})
	return ret0
}

// ProcessPollStatusData indicates an expected call of ProcessPollStatusData.
func (mr *MockBingAdsUtilsMockRecorder) ProcessPollStatusData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPollStatusData", reflect.TypeOf((*MockBingAdsUtils)(nil).ProcessPollStatusData), arg0)
}

// ReadPollResults mocks base method.
func (m *MockBingAdsUtils) ReadPollResults(arg0 string) [][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPollResults", arg0)
	ret0, _ := ret[0].([][]string)
	return ret0
}

// ReadPollResults indicates an expected call of ReadPollResults.
func (mr *MockBingAdsUtilsMockRecorder) ReadPollResults(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPollResults", reflect.TypeOf((*MockBingAdsUtils)(nil).ReadPollResults), arg0)
}

// Unzip mocks base method.
func (m *MockBingAdsUtils) Unzip(arg0, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unzip", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unzip indicates an expected call of Unzip.
func (mr *MockBingAdsUtilsMockRecorder) Unzip(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unzip", reflect.TypeOf((*MockBingAdsUtils)(nil).Unzip), arg0, arg1)
}
